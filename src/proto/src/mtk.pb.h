// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mtk.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mtk_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_mtk_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_mtk_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mtk_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_mtk_2eproto;
namespace mtk {
class Error;
struct ErrorDefaultTypeInternal;
extern ErrorDefaultTypeInternal _Error_default_instance_;
class Reply;
struct ReplyDefaultTypeInternal;
extern ReplyDefaultTypeInternal _Reply_default_instance_;
class Request;
struct RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class SystemPayload;
struct SystemPayloadDefaultTypeInternal;
extern SystemPayloadDefaultTypeInternal _SystemPayload_default_instance_;
class SystemPayload_Close;
struct SystemPayload_CloseDefaultTypeInternal;
extern SystemPayload_CloseDefaultTypeInternal _SystemPayload_Close_default_instance_;
class SystemPayload_Connect;
struct SystemPayload_ConnectDefaultTypeInternal;
extern SystemPayload_ConnectDefaultTypeInternal _SystemPayload_Connect_default_instance_;
class SystemPayload_Login;
struct SystemPayload_LoginDefaultTypeInternal;
extern SystemPayload_LoginDefaultTypeInternal _SystemPayload_Login_default_instance_;
class SystemPayload_Ping;
struct SystemPayload_PingDefaultTypeInternal;
extern SystemPayload_PingDefaultTypeInternal _SystemPayload_Ping_default_instance_;
}  // namespace mtk
PROTOBUF_NAMESPACE_OPEN
template <>
::mtk::Error* Arena::CreateMaybeMessage<::mtk::Error>(Arena*);
template <>
::mtk::Reply* Arena::CreateMaybeMessage<::mtk::Reply>(Arena*);
template <>
::mtk::Request* Arena::CreateMaybeMessage<::mtk::Request>(Arena*);
template <>
::mtk::SystemPayload* Arena::CreateMaybeMessage<::mtk::SystemPayload>(Arena*);
template <>
::mtk::SystemPayload_Close* Arena::CreateMaybeMessage<::mtk::SystemPayload_Close>(Arena*);
template <>
::mtk::SystemPayload_Connect* Arena::CreateMaybeMessage<::mtk::SystemPayload_Connect>(Arena*);
template <>
::mtk::SystemPayload_Login* Arena::CreateMaybeMessage<::mtk::SystemPayload_Login>(Arena*);
template <>
::mtk::SystemPayload_Ping* Arena::CreateMaybeMessage<::mtk::SystemPayload_Ping>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace mtk {
enum Request_Kind : int {
  Request_Kind_Normal = 0,
  Request_Kind_Ping = 1,
  Request_Kind_Connect = 2,
  Request_Kind_Login = 3,
  Request_Kind_Close = 4,
  Request_Kind_Request_Kind_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Request_Kind_Request_Kind_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Request_Kind_IsValid(int value);
constexpr Request_Kind Request_Kind_Kind_MIN = static_cast<Request_Kind>(0);
constexpr Request_Kind Request_Kind_Kind_MAX = static_cast<Request_Kind>(4);
constexpr int Request_Kind_Kind_ARRAYSIZE = 4 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
Request_Kind_descriptor();
template <typename T>
const std::string& Request_Kind_Name(T value) {
  static_assert(std::is_same<T, Request_Kind>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Kind_Name().");
  return Request_Kind_Name(static_cast<Request_Kind>(value));
}
template <>
inline const std::string& Request_Kind_Name(Request_Kind value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<Request_Kind_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool Request_Kind_Parse(absl::string_view name, Request_Kind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Request_Kind>(
      Request_Kind_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Error final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mtk.Error) */ {
 public:
  inline Error() : Error(nullptr) {}
  ~Error() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Error(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Error(const Error& from);
  Error(Error&& from) noexcept
    : Error() {
    *this = ::std::move(from);
  }

  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }
  inline Error& operator=(Error&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Error& default_instance() {
    return *internal_default_instance();
  }
  static inline const Error* internal_default_instance() {
    return reinterpret_cast<const Error*>(
               &_Error_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Error& a, Error& b) {
    a.Swap(&b);
  }
  inline void Swap(Error* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Error* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Error* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Error>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Error& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Error& from) {
    Error::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Error* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mtk.Error";
  }
  protected:
  explicit Error(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 2,
    kErrorCodeFieldNumber = 1,
  };
  // bytes payload = 2;
  void clear_payload() ;
  const std::string& payload() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_payload(Arg_&& arg, Args_... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* ptr);

  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(
      const std::string& value);
  std::string* _internal_mutable_payload();

  public:
  // int32 error_code = 1;
  void clear_error_code() ;
  ::int32_t error_code() const;
  void set_error_code(::int32_t value);

  private:
  ::int32_t _internal_error_code() const;
  void _internal_set_error_code(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:mtk.Error)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
    ::int32_t error_code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mtk_2eproto;
};// -------------------------------------------------------------------

class SystemPayload_Connect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mtk.SystemPayload.Connect) */ {
 public:
  inline SystemPayload_Connect() : SystemPayload_Connect(nullptr) {}
  ~SystemPayload_Connect() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SystemPayload_Connect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SystemPayload_Connect(const SystemPayload_Connect& from);
  SystemPayload_Connect(SystemPayload_Connect&& from) noexcept
    : SystemPayload_Connect() {
    *this = ::std::move(from);
  }

  inline SystemPayload_Connect& operator=(const SystemPayload_Connect& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemPayload_Connect& operator=(SystemPayload_Connect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SystemPayload_Connect& default_instance() {
    return *internal_default_instance();
  }
  static inline const SystemPayload_Connect* internal_default_instance() {
    return reinterpret_cast<const SystemPayload_Connect*>(
               &_SystemPayload_Connect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SystemPayload_Connect& a, SystemPayload_Connect& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemPayload_Connect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemPayload_Connect* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SystemPayload_Connect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SystemPayload_Connect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SystemPayload_Connect& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SystemPayload_Connect& from) {
    SystemPayload_Connect::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemPayload_Connect* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mtk.SystemPayload.Connect";
  }
  protected:
  explicit SystemPayload_Connect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // bytes payload = 2;
  void clear_payload() ;
  const std::string& payload() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_payload(Arg_&& arg, Args_... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* ptr);

  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(
      const std::string& value);
  std::string* _internal_mutable_payload();

  public:
  // uint64 id = 1;
  void clear_id() ;
  ::uint64_t id() const;
  void set_id(::uint64_t value);

  private:
  ::uint64_t _internal_id() const;
  void _internal_set_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:mtk.SystemPayload.Connect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
    ::uint64_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mtk_2eproto;
};// -------------------------------------------------------------------

class SystemPayload_Ping final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mtk.SystemPayload.Ping) */ {
 public:
  inline SystemPayload_Ping() : SystemPayload_Ping(nullptr) {}
  ~SystemPayload_Ping() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SystemPayload_Ping(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SystemPayload_Ping(const SystemPayload_Ping& from);
  SystemPayload_Ping(SystemPayload_Ping&& from) noexcept
    : SystemPayload_Ping() {
    *this = ::std::move(from);
  }

  inline SystemPayload_Ping& operator=(const SystemPayload_Ping& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemPayload_Ping& operator=(SystemPayload_Ping&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SystemPayload_Ping& default_instance() {
    return *internal_default_instance();
  }
  static inline const SystemPayload_Ping* internal_default_instance() {
    return reinterpret_cast<const SystemPayload_Ping*>(
               &_SystemPayload_Ping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SystemPayload_Ping& a, SystemPayload_Ping& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemPayload_Ping* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemPayload_Ping* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SystemPayload_Ping* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SystemPayload_Ping>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SystemPayload_Ping& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SystemPayload_Ping& from) {
    SystemPayload_Ping::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemPayload_Ping* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mtk.SystemPayload.Ping";
  }
  protected:
  explicit SystemPayload_Ping(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 2,
    kNowFieldNumber = 1,
  };
  // bytes payload = 2;
  void clear_payload() ;
  const std::string& payload() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_payload(Arg_&& arg, Args_... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* ptr);

  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(
      const std::string& value);
  std::string* _internal_mutable_payload();

  public:
  // uint64 now = 1;
  void clear_now() ;
  ::uint64_t now() const;
  void set_now(::uint64_t value);

  private:
  ::uint64_t _internal_now() const;
  void _internal_set_now(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:mtk.SystemPayload.Ping)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
    ::uint64_t now_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mtk_2eproto;
};// -------------------------------------------------------------------

class SystemPayload_Login final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mtk.SystemPayload.Login) */ {
 public:
  inline SystemPayload_Login() : SystemPayload_Login(nullptr) {}
  ~SystemPayload_Login() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SystemPayload_Login(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SystemPayload_Login(const SystemPayload_Login& from);
  SystemPayload_Login(SystemPayload_Login&& from) noexcept
    : SystemPayload_Login() {
    *this = ::std::move(from);
  }

  inline SystemPayload_Login& operator=(const SystemPayload_Login& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemPayload_Login& operator=(SystemPayload_Login&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SystemPayload_Login& default_instance() {
    return *internal_default_instance();
  }
  static inline const SystemPayload_Login* internal_default_instance() {
    return reinterpret_cast<const SystemPayload_Login*>(
               &_SystemPayload_Login_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SystemPayload_Login& a, SystemPayload_Login& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemPayload_Login* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemPayload_Login* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SystemPayload_Login* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SystemPayload_Login>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SystemPayload_Login& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SystemPayload_Login& from) {
    SystemPayload_Login::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemPayload_Login* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mtk.SystemPayload.Login";
  }
  protected:
  explicit SystemPayload_Login(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 4,
    kLoginCidFieldNumber = 1,
    kIdFieldNumber = 2,
    kMsgidFieldNumber = 3,
  };
  // bytes payload = 4;
  void clear_payload() ;
  const std::string& payload() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_payload(Arg_&& arg, Args_... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* ptr);

  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(
      const std::string& value);
  std::string* _internal_mutable_payload();

  public:
  // uint64 login_cid = 1;
  void clear_login_cid() ;
  ::uint64_t login_cid() const;
  void set_login_cid(::uint64_t value);

  private:
  ::uint64_t _internal_login_cid() const;
  void _internal_set_login_cid(::uint64_t value);

  public:
  // uint64 id = 2;
  void clear_id() ;
  ::uint64_t id() const;
  void set_id(::uint64_t value);

  private:
  ::uint64_t _internal_id() const;
  void _internal_set_id(::uint64_t value);

  public:
  // uint32 msgid = 3;
  void clear_msgid() ;
  ::uint32_t msgid() const;
  void set_msgid(::uint32_t value);

  private:
  ::uint32_t _internal_msgid() const;
  void _internal_set_msgid(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:mtk.SystemPayload.Login)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
    ::uint64_t login_cid_;
    ::uint64_t id_;
    ::uint32_t msgid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mtk_2eproto;
};// -------------------------------------------------------------------

class SystemPayload_Close final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mtk.SystemPayload.Close) */ {
 public:
  inline SystemPayload_Close() : SystemPayload_Close(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SystemPayload_Close(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SystemPayload_Close(const SystemPayload_Close& from);
  SystemPayload_Close(SystemPayload_Close&& from) noexcept
    : SystemPayload_Close() {
    *this = ::std::move(from);
  }

  inline SystemPayload_Close& operator=(const SystemPayload_Close& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemPayload_Close& operator=(SystemPayload_Close&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SystemPayload_Close& default_instance() {
    return *internal_default_instance();
  }
  static inline const SystemPayload_Close* internal_default_instance() {
    return reinterpret_cast<const SystemPayload_Close*>(
               &_SystemPayload_Close_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SystemPayload_Close& a, SystemPayload_Close& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemPayload_Close* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemPayload_Close* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SystemPayload_Close* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SystemPayload_Close>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SystemPayload_Close& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SystemPayload_Close& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mtk.SystemPayload.Close";
  }
  protected:
  explicit SystemPayload_Close(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mtk.SystemPayload.Close)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_mtk_2eproto;
};// -------------------------------------------------------------------

class SystemPayload final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mtk.SystemPayload) */ {
 public:
  inline SystemPayload() : SystemPayload(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SystemPayload(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SystemPayload(const SystemPayload& from);
  SystemPayload(SystemPayload&& from) noexcept
    : SystemPayload() {
    *this = ::std::move(from);
  }

  inline SystemPayload& operator=(const SystemPayload& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemPayload& operator=(SystemPayload&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SystemPayload& default_instance() {
    return *internal_default_instance();
  }
  static inline const SystemPayload* internal_default_instance() {
    return reinterpret_cast<const SystemPayload*>(
               &_SystemPayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SystemPayload& a, SystemPayload& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemPayload* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemPayload* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SystemPayload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SystemPayload>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SystemPayload& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SystemPayload& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mtk.SystemPayload";
  }
  protected:
  explicit SystemPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SystemPayload_Connect Connect;
  typedef SystemPayload_Ping Ping;
  typedef SystemPayload_Login Login;
  typedef SystemPayload_Close Close;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mtk.SystemPayload)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_mtk_2eproto;
};// -------------------------------------------------------------------

class Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mtk.Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  ~Request() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Request& from) {
    Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mtk.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Kind = Request_Kind;
  static constexpr Kind Normal = Request_Kind_Normal;
  static constexpr Kind Ping = Request_Kind_Ping;
  static constexpr Kind Connect = Request_Kind_Connect;
  static constexpr Kind Login = Request_Kind_Login;
  static constexpr Kind Close = Request_Kind_Close;
  static inline bool Kind_IsValid(int value) {
    return Request_Kind_IsValid(value);
  }
  static constexpr Kind Kind_MIN = Request_Kind_Kind_MIN;
  static constexpr Kind Kind_MAX = Request_Kind_Kind_MAX;
  static constexpr int Kind_ARRAYSIZE = Request_Kind_Kind_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Kind_descriptor() {
    return Request_Kind_descriptor();
  }
  template <typename T>
  static inline const std::string& Kind_Name(T value) {
    return Request_Kind_Name(value);
  }
  static inline bool Kind_Parse(absl::string_view name, Kind* value) {
    return Request_Kind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 10,
    kTypeFieldNumber = 1,
    kMsgidFieldNumber = 2,
    kKindFieldNumber = 3,
  };
  // bytes payload = 10;
  void clear_payload() ;
  const std::string& payload() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_payload(Arg_&& arg, Args_... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* ptr);

  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(
      const std::string& value);
  std::string* _internal_mutable_payload();

  public:
  // uint32 type = 1;
  void clear_type() ;
  ::uint32_t type() const;
  void set_type(::uint32_t value);

  private:
  ::uint32_t _internal_type() const;
  void _internal_set_type(::uint32_t value);

  public:
  // uint32 msgid = 2;
  void clear_msgid() ;
  ::uint32_t msgid() const;
  void set_msgid(::uint32_t value);

  private:
  ::uint32_t _internal_msgid() const;
  void _internal_set_msgid(::uint32_t value);

  public:
  // .mtk.Request.Kind kind = 3;
  void clear_kind() ;
  ::mtk::Request_Kind kind() const;
  void set_kind(::mtk::Request_Kind value);

  private:
  ::mtk::Request_Kind _internal_kind() const;
  void _internal_set_kind(::mtk::Request_Kind value);

  public:
  // @@protoc_insertion_point(class_scope:mtk.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
    ::uint32_t type_;
    ::uint32_t msgid_;
    int kind_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mtk_2eproto;
};// -------------------------------------------------------------------

class Reply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mtk.Reply) */ {
 public:
  inline Reply() : Reply(nullptr) {}
  ~Reply() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Reply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Reply(const Reply& from);
  Reply(Reply&& from) noexcept
    : Reply() {
    *this = ::std::move(from);
  }

  inline Reply& operator=(const Reply& from) {
    CopyFrom(from);
    return *this;
  }
  inline Reply& operator=(Reply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Reply& default_instance() {
    return *internal_default_instance();
  }
  static inline const Reply* internal_default_instance() {
    return reinterpret_cast<const Reply*>(
               &_Reply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Reply& a, Reply& b) {
    a.Swap(&b);
  }
  inline void Swap(Reply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Reply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Reply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Reply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Reply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Reply& from) {
    Reply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Reply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mtk.Reply";
  }
  protected:
  explicit Reply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 10,
    kErrorFieldNumber = 3,
    kTypeFieldNumber = 1,
    kMsgidFieldNumber = 2,
  };
  // bytes payload = 10;
  void clear_payload() ;
  const std::string& payload() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_payload(Arg_&& arg, Args_... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* ptr);

  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(
      const std::string& value);
  std::string* _internal_mutable_payload();

  public:
  // .mtk.Error error = 3;
  bool has_error() const;
  void clear_error() ;
  const ::mtk::Error& error() const;
  PROTOBUF_NODISCARD ::mtk::Error* release_error();
  ::mtk::Error* mutable_error();
  void set_allocated_error(::mtk::Error* error);
  private:
  const ::mtk::Error& _internal_error() const;
  ::mtk::Error* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::mtk::Error* error);
  ::mtk::Error* unsafe_arena_release_error();
  // uint32 type = 1;
  void clear_type() ;
  ::uint32_t type() const;
  void set_type(::uint32_t value);

  private:
  ::uint32_t _internal_type() const;
  void _internal_set_type(::uint32_t value);

  public:
  // uint32 msgid = 2;
  void clear_msgid() ;
  ::uint32_t msgid() const;
  void set_msgid(::uint32_t value);

  private:
  ::uint32_t _internal_msgid() const;
  void _internal_set_msgid(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:mtk.Reply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
    ::mtk::Error* error_;
    ::uint32_t type_;
    ::uint32_t msgid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mtk_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Error

// int32 error_code = 1;
inline void Error::clear_error_code() {
  _impl_.error_code_ = 0;
}
inline ::int32_t Error::error_code() const {
  // @@protoc_insertion_point(field_get:mtk.Error.error_code)
  return _internal_error_code();
}
inline void Error::set_error_code(::int32_t value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:mtk.Error.error_code)
}
inline ::int32_t Error::_internal_error_code() const {
  return _impl_.error_code_;
}
inline void Error::_internal_set_error_code(::int32_t value) {
  ;
  _impl_.error_code_ = value;
}

// bytes payload = 2;
inline void Error::clear_payload() {
  _impl_.payload_.ClearToEmpty();
}
inline const std::string& Error::payload() const {
  // @@protoc_insertion_point(field_get:mtk.Error.payload)
  return _internal_payload();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Error::set_payload(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.payload_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mtk.Error.payload)
}
inline std::string* Error::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:mtk.Error.payload)
  return _s;
}
inline const std::string& Error::_internal_payload() const {
  return _impl_.payload_.Get();
}
inline void Error::_internal_set_payload(const std::string& value) {
  ;


  _impl_.payload_.Set(value, GetArenaForAllocation());
}
inline std::string* Error::_internal_mutable_payload() {
  ;
  return _impl_.payload_.Mutable( GetArenaForAllocation());
}
inline std::string* Error::release_payload() {
  // @@protoc_insertion_point(field_release:mtk.Error.payload)
  return _impl_.payload_.Release();
}
inline void Error::set_allocated_payload(std::string* value) {
  _impl_.payload_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.payload_.IsDefault()) {
          _impl_.payload_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mtk.Error.payload)
}

// -------------------------------------------------------------------

// SystemPayload_Connect

// uint64 id = 1;
inline void SystemPayload_Connect::clear_id() {
  _impl_.id_ = ::uint64_t{0u};
}
inline ::uint64_t SystemPayload_Connect::id() const {
  // @@protoc_insertion_point(field_get:mtk.SystemPayload.Connect.id)
  return _internal_id();
}
inline void SystemPayload_Connect::set_id(::uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mtk.SystemPayload.Connect.id)
}
inline ::uint64_t SystemPayload_Connect::_internal_id() const {
  return _impl_.id_;
}
inline void SystemPayload_Connect::_internal_set_id(::uint64_t value) {
  ;
  _impl_.id_ = value;
}

// bytes payload = 2;
inline void SystemPayload_Connect::clear_payload() {
  _impl_.payload_.ClearToEmpty();
}
inline const std::string& SystemPayload_Connect::payload() const {
  // @@protoc_insertion_point(field_get:mtk.SystemPayload.Connect.payload)
  return _internal_payload();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SystemPayload_Connect::set_payload(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.payload_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mtk.SystemPayload.Connect.payload)
}
inline std::string* SystemPayload_Connect::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:mtk.SystemPayload.Connect.payload)
  return _s;
}
inline const std::string& SystemPayload_Connect::_internal_payload() const {
  return _impl_.payload_.Get();
}
inline void SystemPayload_Connect::_internal_set_payload(const std::string& value) {
  ;


  _impl_.payload_.Set(value, GetArenaForAllocation());
}
inline std::string* SystemPayload_Connect::_internal_mutable_payload() {
  ;
  return _impl_.payload_.Mutable( GetArenaForAllocation());
}
inline std::string* SystemPayload_Connect::release_payload() {
  // @@protoc_insertion_point(field_release:mtk.SystemPayload.Connect.payload)
  return _impl_.payload_.Release();
}
inline void SystemPayload_Connect::set_allocated_payload(std::string* value) {
  _impl_.payload_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.payload_.IsDefault()) {
          _impl_.payload_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mtk.SystemPayload.Connect.payload)
}

// -------------------------------------------------------------------

// SystemPayload_Ping

// uint64 now = 1;
inline void SystemPayload_Ping::clear_now() {
  _impl_.now_ = ::uint64_t{0u};
}
inline ::uint64_t SystemPayload_Ping::now() const {
  // @@protoc_insertion_point(field_get:mtk.SystemPayload.Ping.now)
  return _internal_now();
}
inline void SystemPayload_Ping::set_now(::uint64_t value) {
  _internal_set_now(value);
  // @@protoc_insertion_point(field_set:mtk.SystemPayload.Ping.now)
}
inline ::uint64_t SystemPayload_Ping::_internal_now() const {
  return _impl_.now_;
}
inline void SystemPayload_Ping::_internal_set_now(::uint64_t value) {
  ;
  _impl_.now_ = value;
}

// bytes payload = 2;
inline void SystemPayload_Ping::clear_payload() {
  _impl_.payload_.ClearToEmpty();
}
inline const std::string& SystemPayload_Ping::payload() const {
  // @@protoc_insertion_point(field_get:mtk.SystemPayload.Ping.payload)
  return _internal_payload();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SystemPayload_Ping::set_payload(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.payload_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mtk.SystemPayload.Ping.payload)
}
inline std::string* SystemPayload_Ping::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:mtk.SystemPayload.Ping.payload)
  return _s;
}
inline const std::string& SystemPayload_Ping::_internal_payload() const {
  return _impl_.payload_.Get();
}
inline void SystemPayload_Ping::_internal_set_payload(const std::string& value) {
  ;


  _impl_.payload_.Set(value, GetArenaForAllocation());
}
inline std::string* SystemPayload_Ping::_internal_mutable_payload() {
  ;
  return _impl_.payload_.Mutable( GetArenaForAllocation());
}
inline std::string* SystemPayload_Ping::release_payload() {
  // @@protoc_insertion_point(field_release:mtk.SystemPayload.Ping.payload)
  return _impl_.payload_.Release();
}
inline void SystemPayload_Ping::set_allocated_payload(std::string* value) {
  _impl_.payload_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.payload_.IsDefault()) {
          _impl_.payload_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mtk.SystemPayload.Ping.payload)
}

// -------------------------------------------------------------------

// SystemPayload_Login

// uint64 login_cid = 1;
inline void SystemPayload_Login::clear_login_cid() {
  _impl_.login_cid_ = ::uint64_t{0u};
}
inline ::uint64_t SystemPayload_Login::login_cid() const {
  // @@protoc_insertion_point(field_get:mtk.SystemPayload.Login.login_cid)
  return _internal_login_cid();
}
inline void SystemPayload_Login::set_login_cid(::uint64_t value) {
  _internal_set_login_cid(value);
  // @@protoc_insertion_point(field_set:mtk.SystemPayload.Login.login_cid)
}
inline ::uint64_t SystemPayload_Login::_internal_login_cid() const {
  return _impl_.login_cid_;
}
inline void SystemPayload_Login::_internal_set_login_cid(::uint64_t value) {
  ;
  _impl_.login_cid_ = value;
}

// uint64 id = 2;
inline void SystemPayload_Login::clear_id() {
  _impl_.id_ = ::uint64_t{0u};
}
inline ::uint64_t SystemPayload_Login::id() const {
  // @@protoc_insertion_point(field_get:mtk.SystemPayload.Login.id)
  return _internal_id();
}
inline void SystemPayload_Login::set_id(::uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mtk.SystemPayload.Login.id)
}
inline ::uint64_t SystemPayload_Login::_internal_id() const {
  return _impl_.id_;
}
inline void SystemPayload_Login::_internal_set_id(::uint64_t value) {
  ;
  _impl_.id_ = value;
}

// uint32 msgid = 3;
inline void SystemPayload_Login::clear_msgid() {
  _impl_.msgid_ = 0u;
}
inline ::uint32_t SystemPayload_Login::msgid() const {
  // @@protoc_insertion_point(field_get:mtk.SystemPayload.Login.msgid)
  return _internal_msgid();
}
inline void SystemPayload_Login::set_msgid(::uint32_t value) {
  _internal_set_msgid(value);
  // @@protoc_insertion_point(field_set:mtk.SystemPayload.Login.msgid)
}
inline ::uint32_t SystemPayload_Login::_internal_msgid() const {
  return _impl_.msgid_;
}
inline void SystemPayload_Login::_internal_set_msgid(::uint32_t value) {
  ;
  _impl_.msgid_ = value;
}

// bytes payload = 4;
inline void SystemPayload_Login::clear_payload() {
  _impl_.payload_.ClearToEmpty();
}
inline const std::string& SystemPayload_Login::payload() const {
  // @@protoc_insertion_point(field_get:mtk.SystemPayload.Login.payload)
  return _internal_payload();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SystemPayload_Login::set_payload(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.payload_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mtk.SystemPayload.Login.payload)
}
inline std::string* SystemPayload_Login::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:mtk.SystemPayload.Login.payload)
  return _s;
}
inline const std::string& SystemPayload_Login::_internal_payload() const {
  return _impl_.payload_.Get();
}
inline void SystemPayload_Login::_internal_set_payload(const std::string& value) {
  ;


  _impl_.payload_.Set(value, GetArenaForAllocation());
}
inline std::string* SystemPayload_Login::_internal_mutable_payload() {
  ;
  return _impl_.payload_.Mutable( GetArenaForAllocation());
}
inline std::string* SystemPayload_Login::release_payload() {
  // @@protoc_insertion_point(field_release:mtk.SystemPayload.Login.payload)
  return _impl_.payload_.Release();
}
inline void SystemPayload_Login::set_allocated_payload(std::string* value) {
  _impl_.payload_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.payload_.IsDefault()) {
          _impl_.payload_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mtk.SystemPayload.Login.payload)
}

// -------------------------------------------------------------------

// SystemPayload_Close

// -------------------------------------------------------------------

// SystemPayload

// -------------------------------------------------------------------

// Request

// uint32 type = 1;
inline void Request::clear_type() {
  _impl_.type_ = 0u;
}
inline ::uint32_t Request::type() const {
  // @@protoc_insertion_point(field_get:mtk.Request.type)
  return _internal_type();
}
inline void Request::set_type(::uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:mtk.Request.type)
}
inline ::uint32_t Request::_internal_type() const {
  return _impl_.type_;
}
inline void Request::_internal_set_type(::uint32_t value) {
  ;
  _impl_.type_ = value;
}

// uint32 msgid = 2;
inline void Request::clear_msgid() {
  _impl_.msgid_ = 0u;
}
inline ::uint32_t Request::msgid() const {
  // @@protoc_insertion_point(field_get:mtk.Request.msgid)
  return _internal_msgid();
}
inline void Request::set_msgid(::uint32_t value) {
  _internal_set_msgid(value);
  // @@protoc_insertion_point(field_set:mtk.Request.msgid)
}
inline ::uint32_t Request::_internal_msgid() const {
  return _impl_.msgid_;
}
inline void Request::_internal_set_msgid(::uint32_t value) {
  ;
  _impl_.msgid_ = value;
}

// .mtk.Request.Kind kind = 3;
inline void Request::clear_kind() {
  _impl_.kind_ = 0;
}
inline ::mtk::Request_Kind Request::kind() const {
  // @@protoc_insertion_point(field_get:mtk.Request.kind)
  return _internal_kind();
}
inline void Request::set_kind(::mtk::Request_Kind value) {
   _internal_set_kind(value);
  // @@protoc_insertion_point(field_set:mtk.Request.kind)
}
inline ::mtk::Request_Kind Request::_internal_kind() const {
  return static_cast<::mtk::Request_Kind>(_impl_.kind_);
}
inline void Request::_internal_set_kind(::mtk::Request_Kind value) {
  ;
  _impl_.kind_ = value;
}

// bytes payload = 10;
inline void Request::clear_payload() {
  _impl_.payload_.ClearToEmpty();
}
inline const std::string& Request::payload() const {
  // @@protoc_insertion_point(field_get:mtk.Request.payload)
  return _internal_payload();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Request::set_payload(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.payload_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mtk.Request.payload)
}
inline std::string* Request::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:mtk.Request.payload)
  return _s;
}
inline const std::string& Request::_internal_payload() const {
  return _impl_.payload_.Get();
}
inline void Request::_internal_set_payload(const std::string& value) {
  ;


  _impl_.payload_.Set(value, GetArenaForAllocation());
}
inline std::string* Request::_internal_mutable_payload() {
  ;
  return _impl_.payload_.Mutable( GetArenaForAllocation());
}
inline std::string* Request::release_payload() {
  // @@protoc_insertion_point(field_release:mtk.Request.payload)
  return _impl_.payload_.Release();
}
inline void Request::set_allocated_payload(std::string* value) {
  _impl_.payload_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.payload_.IsDefault()) {
          _impl_.payload_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mtk.Request.payload)
}

// -------------------------------------------------------------------

// Reply

// uint32 type = 1;
inline void Reply::clear_type() {
  _impl_.type_ = 0u;
}
inline ::uint32_t Reply::type() const {
  // @@protoc_insertion_point(field_get:mtk.Reply.type)
  return _internal_type();
}
inline void Reply::set_type(::uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:mtk.Reply.type)
}
inline ::uint32_t Reply::_internal_type() const {
  return _impl_.type_;
}
inline void Reply::_internal_set_type(::uint32_t value) {
  ;
  _impl_.type_ = value;
}

// uint32 msgid = 2;
inline void Reply::clear_msgid() {
  _impl_.msgid_ = 0u;
}
inline ::uint32_t Reply::msgid() const {
  // @@protoc_insertion_point(field_get:mtk.Reply.msgid)
  return _internal_msgid();
}
inline void Reply::set_msgid(::uint32_t value) {
  _internal_set_msgid(value);
  // @@protoc_insertion_point(field_set:mtk.Reply.msgid)
}
inline ::uint32_t Reply::_internal_msgid() const {
  return _impl_.msgid_;
}
inline void Reply::_internal_set_msgid(::uint32_t value) {
  ;
  _impl_.msgid_ = value;
}

// .mtk.Error error = 3;
inline bool Reply::has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.error_ != nullptr);
  return value;
}
inline void Reply::clear_error() {
  if (_impl_.error_ != nullptr) _impl_.error_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mtk::Error& Reply::_internal_error() const {
  const ::mtk::Error* p = _impl_.error_;
  return p != nullptr ? *p : reinterpret_cast<const ::mtk::Error&>(
      ::mtk::_Error_default_instance_);
}
inline const ::mtk::Error& Reply::error() const {
  // @@protoc_insertion_point(field_get:mtk.Reply.error)
  return _internal_error();
}
inline void Reply::unsafe_arena_set_allocated_error(
    ::mtk::Error* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  _impl_.error_ = error;
  if (error) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mtk.Reply.error)
}
inline ::mtk::Error* Reply::release_error() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mtk::Error* temp = _impl_.error_;
  _impl_.error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mtk::Error* Reply::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:mtk.Reply.error)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mtk::Error* temp = _impl_.error_;
  _impl_.error_ = nullptr;
  return temp;
}
inline ::mtk::Error* Reply::_internal_mutable_error() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.error_ == nullptr) {
    auto* p = CreateMaybeMessage<::mtk::Error>(GetArenaForAllocation());
    _impl_.error_ = p;
  }
  return _impl_.error_;
}
inline ::mtk::Error* Reply::mutable_error() {
  ::mtk::Error* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:mtk.Reply.error)
  return _msg;
}
inline void Reply::set_allocated_error(::mtk::Error* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.error_ = error;
  // @@protoc_insertion_point(field_set_allocated:mtk.Reply.error)
}

// bytes payload = 10;
inline void Reply::clear_payload() {
  _impl_.payload_.ClearToEmpty();
}
inline const std::string& Reply::payload() const {
  // @@protoc_insertion_point(field_get:mtk.Reply.payload)
  return _internal_payload();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Reply::set_payload(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.payload_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mtk.Reply.payload)
}
inline std::string* Reply::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:mtk.Reply.payload)
  return _s;
}
inline const std::string& Reply::_internal_payload() const {
  return _impl_.payload_.Get();
}
inline void Reply::_internal_set_payload(const std::string& value) {
  ;


  _impl_.payload_.Set(value, GetArenaForAllocation());
}
inline std::string* Reply::_internal_mutable_payload() {
  ;
  return _impl_.payload_.Mutable( GetArenaForAllocation());
}
inline std::string* Reply::release_payload() {
  // @@protoc_insertion_point(field_release:mtk.Reply.payload)
  return _impl_.payload_.Release();
}
inline void Reply::set_allocated_payload(std::string* value) {
  _impl_.payload_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.payload_.IsDefault()) {
          _impl_.payload_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mtk.Reply.payload)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace mtk


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::mtk::Request_Kind> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::mtk::Request_Kind>() {
  return ::mtk::Request_Kind_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_mtk_2eproto_2epb_2eh
