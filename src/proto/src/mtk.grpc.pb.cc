// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: mtk.proto

#include "mtk.pb.h"
#include "mtk.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace mtk {

static const char* Stream_method_names[] = {
  "/mtk.Stream/Read",
  "/mtk.Stream/Write",
};

std::unique_ptr< Stream::Stub> Stream::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Stream::Stub> stub(new Stream::Stub(channel));
  return stub;
}

Stream::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Read_(Stream_method_names[0], ::grpc::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_Write_(Stream_method_names[1], ::grpc::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::mtk::Request, ::mtk::Reply>* Stream::Stub::ReadRaw(::grpc::ClientContext* context) {
  return new ::grpc::ClientReaderWriter< ::mtk::Request, ::mtk::Reply>(channel_.get(), rpcmethod_Read_, context);
}

::grpc::ClientAsyncReaderWriter< ::mtk::Request, ::mtk::Reply>* Stream::Stub::AsyncReadRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReaderWriter< ::mtk::Request, ::mtk::Reply>(channel_.get(), cq, rpcmethod_Read_, context, tag);
}

::grpc::ClientReaderWriter< ::mtk::Request, ::mtk::Reply>* Stream::Stub::WriteRaw(::grpc::ClientContext* context) {
  return new ::grpc::ClientReaderWriter< ::mtk::Request, ::mtk::Reply>(channel_.get(), rpcmethod_Write_, context);
}

::grpc::ClientAsyncReaderWriter< ::mtk::Request, ::mtk::Reply>* Stream::Stub::AsyncWriteRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReaderWriter< ::mtk::Request, ::mtk::Reply>(channel_.get(), cq, rpcmethod_Write_, context, tag);
}

Stream::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      Stream_method_names[0],
      ::grpc::RpcMethod::BIDI_STREAMING,
      new ::grpc::BidiStreamingHandler< Stream::Service, ::mtk::Request, ::mtk::Reply>(
          std::mem_fn(&Stream::Service::Read), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Stream_method_names[1],
      ::grpc::RpcMethod::BIDI_STREAMING,
      new ::grpc::BidiStreamingHandler< Stream::Service, ::mtk::Request, ::mtk::Reply>(
          std::mem_fn(&Stream::Service::Write), this)));
}

Stream::Service::~Service() {
}

::grpc::Status Stream::Service::Read(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::mtk::Reply, ::mtk::Request>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stream::Service::Write(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::mtk::Reply, ::mtk::Request>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mtk

