// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: mtk.proto

#include "mtk.pb.h"
#include "mtk.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace mtk {

static const char* Stream_method_names[] = {
  "/mtk.Stream/Read",
  "/mtk.Stream/Write",
};

std::unique_ptr< Stream::Stub> Stream::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Stream::Stub> stub(new Stream::Stub(channel, options));
  return stub;
}

Stream::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Read_(Stream_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_Write_(Stream_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::mtk::Request, ::mtk::Reply>* Stream::Stub::ReadRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::mtk::Request, ::mtk::Reply>::Create(channel_.get(), rpcmethod_Read_, context);
}

void Stream::Stub::async::Read(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::mtk::Request,::mtk::Reply>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::mtk::Request,::mtk::Reply>::Create(stub_->channel_.get(), stub_->rpcmethod_Read_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::mtk::Request, ::mtk::Reply>* Stream::Stub::AsyncReadRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::mtk::Request, ::mtk::Reply>::Create(channel_.get(), cq, rpcmethod_Read_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::mtk::Request, ::mtk::Reply>* Stream::Stub::PrepareAsyncReadRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::mtk::Request, ::mtk::Reply>::Create(channel_.get(), cq, rpcmethod_Read_, context, false, nullptr);
}

::grpc::ClientReaderWriter< ::mtk::Request, ::mtk::Reply>* Stream::Stub::WriteRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::mtk::Request, ::mtk::Reply>::Create(channel_.get(), rpcmethod_Write_, context);
}

void Stream::Stub::async::Write(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::mtk::Request,::mtk::Reply>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::mtk::Request,::mtk::Reply>::Create(stub_->channel_.get(), stub_->rpcmethod_Write_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::mtk::Request, ::mtk::Reply>* Stream::Stub::AsyncWriteRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::mtk::Request, ::mtk::Reply>::Create(channel_.get(), cq, rpcmethod_Write_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::mtk::Request, ::mtk::Reply>* Stream::Stub::PrepareAsyncWriteRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::mtk::Request, ::mtk::Reply>::Create(channel_.get(), cq, rpcmethod_Write_, context, false, nullptr);
}

Stream::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stream_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< Stream::Service, ::mtk::Request, ::mtk::Reply>(
          [](Stream::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::mtk::Reply,
             ::mtk::Request>* stream) {
               return service->Read(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stream_method_names[1],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< Stream::Service, ::mtk::Request, ::mtk::Reply>(
          [](Stream::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::mtk::Reply,
             ::mtk::Request>* stream) {
               return service->Write(ctx, stream);
             }, this)));
}

Stream::Service::~Service() {
}

::grpc::Status Stream::Service::Read(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::mtk::Reply, ::mtk::Request>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stream::Service::Write(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::mtk::Reply, ::mtk::Request>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mtk

