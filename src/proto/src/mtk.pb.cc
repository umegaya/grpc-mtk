// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mtk.proto

#include "mtk.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace mtk {
template <typename>
PROTOBUF_CONSTEXPR Error::Error(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.payload_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.error_code_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ErrorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ErrorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ErrorDefaultTypeInternal() {}
  union {
    Error _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ErrorDefaultTypeInternal _Error_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SystemPayload_Connect::SystemPayload_Connect(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.payload_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SystemPayload_ConnectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SystemPayload_ConnectDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SystemPayload_ConnectDefaultTypeInternal() {}
  union {
    SystemPayload_Connect _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SystemPayload_ConnectDefaultTypeInternal _SystemPayload_Connect_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SystemPayload_Ping::SystemPayload_Ping(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.payload_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.now_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SystemPayload_PingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SystemPayload_PingDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SystemPayload_PingDefaultTypeInternal() {}
  union {
    SystemPayload_Ping _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SystemPayload_PingDefaultTypeInternal _SystemPayload_Ping_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SystemPayload_Login::SystemPayload_Login(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.payload_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.login_cid_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.msgid_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SystemPayload_LoginDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SystemPayload_LoginDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SystemPayload_LoginDefaultTypeInternal() {}
  union {
    SystemPayload_Login _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SystemPayload_LoginDefaultTypeInternal _SystemPayload_Login_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SystemPayload_Close::SystemPayload_Close(
    ::_pbi::ConstantInitialized) {}
struct SystemPayload_CloseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SystemPayload_CloseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SystemPayload_CloseDefaultTypeInternal() {}
  union {
    SystemPayload_Close _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SystemPayload_CloseDefaultTypeInternal _SystemPayload_Close_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SystemPayload::SystemPayload(
    ::_pbi::ConstantInitialized) {}
struct SystemPayloadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SystemPayloadDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SystemPayloadDefaultTypeInternal() {}
  union {
    SystemPayload _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SystemPayloadDefaultTypeInternal _SystemPayload_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Request::Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.payload_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.type_)*/ 0u

  , /*decltype(_impl_.msgid_)*/ 0u

  , /*decltype(_impl_.kind_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestDefaultTypeInternal() {}
  union {
    Request _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestDefaultTypeInternal _Request_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Reply::Reply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.payload_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.error_)*/nullptr
  , /*decltype(_impl_.type_)*/ 0u

  , /*decltype(_impl_.msgid_)*/ 0u
} {}
struct ReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReplyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReplyDefaultTypeInternal() {}
  union {
    Reply _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReplyDefaultTypeInternal _Reply_default_instance_;
}  // namespace mtk
static ::_pb::Metadata file_level_metadata_mtk_2eproto[8];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_mtk_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_mtk_2eproto = nullptr;
const ::uint32_t TableStruct_mtk_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mtk::Error, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mtk::Error, _impl_.error_code_),
    PROTOBUF_FIELD_OFFSET(::mtk::Error, _impl_.payload_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mtk::SystemPayload_Connect, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mtk::SystemPayload_Connect, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::mtk::SystemPayload_Connect, _impl_.payload_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mtk::SystemPayload_Ping, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mtk::SystemPayload_Ping, _impl_.now_),
    PROTOBUF_FIELD_OFFSET(::mtk::SystemPayload_Ping, _impl_.payload_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mtk::SystemPayload_Login, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mtk::SystemPayload_Login, _impl_.login_cid_),
    PROTOBUF_FIELD_OFFSET(::mtk::SystemPayload_Login, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::mtk::SystemPayload_Login, _impl_.msgid_),
    PROTOBUF_FIELD_OFFSET(::mtk::SystemPayload_Login, _impl_.payload_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mtk::SystemPayload_Close, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mtk::SystemPayload, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mtk::Request, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mtk::Request, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::mtk::Request, _impl_.msgid_),
    PROTOBUF_FIELD_OFFSET(::mtk::Request, _impl_.kind_),
    PROTOBUF_FIELD_OFFSET(::mtk::Request, _impl_.payload_),
    PROTOBUF_FIELD_OFFSET(::mtk::Reply, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mtk::Reply, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mtk::Reply, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::mtk::Reply, _impl_.msgid_),
    PROTOBUF_FIELD_OFFSET(::mtk::Reply, _impl_.error_),
    PROTOBUF_FIELD_OFFSET(::mtk::Reply, _impl_.payload_),
    ~0u,
    ~0u,
    0,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::mtk::Error)},
        { 10, -1, -1, sizeof(::mtk::SystemPayload_Connect)},
        { 20, -1, -1, sizeof(::mtk::SystemPayload_Ping)},
        { 30, -1, -1, sizeof(::mtk::SystemPayload_Login)},
        { 42, -1, -1, sizeof(::mtk::SystemPayload_Close)},
        { 50, -1, -1, sizeof(::mtk::SystemPayload)},
        { 58, -1, -1, sizeof(::mtk::Request)},
        { 70, 82, -1, sizeof(::mtk::Reply)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::mtk::_Error_default_instance_._instance,
    &::mtk::_SystemPayload_Connect_default_instance_._instance,
    &::mtk::_SystemPayload_Ping_default_instance_._instance,
    &::mtk::_SystemPayload_Login_default_instance_._instance,
    &::mtk::_SystemPayload_Close_default_instance_._instance,
    &::mtk::_SystemPayload_default_instance_._instance,
    &::mtk::_Request_default_instance_._instance,
    &::mtk::_Reply_default_instance_._instance,
};
const char descriptor_table_protodef_mtk_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\tmtk.proto\022\003mtk\",\n\005Error\022\022\n\nerror_code\030"
    "\001 \001(\005\022\017\n\007payload\030\002 \001(\014\"\256\001\n\rSystemPayload"
    "\032&\n\007Connect\022\n\n\002id\030\001 \001(\004\022\017\n\007payload\030\002 \001(\014"
    "\032$\n\004Ping\022\013\n\003now\030\001 \001(\004\022\017\n\007payload\030\002 \001(\014\032F"
    "\n\005Login\022\021\n\tlogin_cid\030\001 \001(\004\022\n\n\002id\030\002 \001(\004\022\r"
    "\n\005msgid\030\003 \001(\r\022\017\n\007payload\030\004 \001(\014\032\007\n\005Close\""
    "\231\001\n\007Request\022\014\n\004type\030\001 \001(\r\022\r\n\005msgid\030\002 \001(\r"
    "\022\037\n\004kind\030\003 \001(\0162\021.mtk.Request.Kind\022\017\n\007pay"
    "load\030\n \001(\014\"\?\n\004Kind\022\n\n\006Normal\020\000\022\010\n\004Ping\020\001"
    "\022\013\n\007Connect\020\002\022\t\n\005Login\020\003\022\t\n\005Close\020\004\"P\n\005R"
    "eply\022\014\n\004type\030\001 \001(\r\022\r\n\005msgid\030\002 \001(\r\022\031\n\005err"
    "or\030\003 \001(\0132\n.mtk.Error\022\017\n\007payload\030\n \001(\0142Y\n"
    "\006Stream\022&\n\004Read\022\014.mtk.Request\032\n.mtk.Repl"
    "y\"\000(\0010\001\022\'\n\005Write\022\014.mtk.Request\032\n.mtk.Rep"
    "ly\"\000(\0010\001b\006proto3"
};
static ::absl::once_flag descriptor_table_mtk_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_mtk_2eproto = {
    false,
    false,
    576,
    descriptor_table_protodef_mtk_2eproto,
    "mtk.proto",
    &descriptor_table_mtk_2eproto_once,
    nullptr,
    0,
    8,
    schemas,
    file_default_instances,
    TableStruct_mtk_2eproto::offsets,
    file_level_metadata_mtk_2eproto,
    file_level_enum_descriptors_mtk_2eproto,
    file_level_service_descriptors_mtk_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_mtk_2eproto_getter() {
  return &descriptor_table_mtk_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_mtk_2eproto(&descriptor_table_mtk_2eproto);
namespace mtk {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Request_Kind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mtk_2eproto);
  return file_level_enum_descriptors_mtk_2eproto[0];
}
bool Request_Kind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr Request_Kind Request::Normal;
constexpr Request_Kind Request::Ping;
constexpr Request_Kind Request::Connect;
constexpr Request_Kind Request::Login;
constexpr Request_Kind Request::Close;
constexpr Request_Kind Request::Kind_MIN;
constexpr Request_Kind Request::Kind_MAX;
constexpr int Request::Kind_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class Error::_Internal {
 public:
};

Error::Error(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mtk.Error)
}
Error::Error(const Error& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Error* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_) {}

    , decltype(_impl_.error_code_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.payload_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload().empty()) {
    _this->_impl_.payload_.Set(from._internal_payload(), _this->GetArenaForAllocation());
  }
  _this->_impl_.error_code_ = from._impl_.error_code_;
  // @@protoc_insertion_point(copy_constructor:mtk.Error)
}

inline void Error::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_) {}

    , decltype(_impl_.error_code_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.payload_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:mtk.Error)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Error::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.payload_.Destroy();
}

void Error::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Error::Clear() {
// @@protoc_insertion_point(message_clear_start:mtk.Error)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.payload_.ClearToEmpty();
  _impl_.error_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Error::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 error_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes payload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Error::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mtk.Error)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 error_code = 1;
  if (this->_internal_error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_error_code(), target);
  }

  // bytes payload = 2;
  if (!this->_internal_payload().empty()) {
    const std::string& _s = this->_internal_payload();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mtk.Error)
  return target;
}

::size_t Error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mtk.Error)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes payload = 2;
  if (!this->_internal_payload().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_payload());
  }

  // int32 error_code = 1;
  if (this->_internal_error_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_error_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Error::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Error::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Error::GetClassData() const { return &_class_data_; }


void Error::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Error*>(&to_msg);
  auto& from = static_cast<const Error&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mtk.Error)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_payload().empty()) {
    _this->_internal_set_payload(from._internal_payload());
  }
  if (from._internal_error_code() != 0) {
    _this->_internal_set_error_code(from._internal_error_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Error::CopyFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mtk.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {
  return true;
}

void Error::InternalSwap(Error* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.payload_, lhs_arena,
                                       &other->_impl_.payload_, rhs_arena);

  swap(_impl_.error_code_, other->_impl_.error_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Error::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mtk_2eproto_getter, &descriptor_table_mtk_2eproto_once,
      file_level_metadata_mtk_2eproto[0]);
}
// ===================================================================

class SystemPayload_Connect::_Internal {
 public:
};

SystemPayload_Connect::SystemPayload_Connect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mtk.SystemPayload.Connect)
}
SystemPayload_Connect::SystemPayload_Connect(const SystemPayload_Connect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SystemPayload_Connect* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_) {}

    , decltype(_impl_.id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.payload_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload().empty()) {
    _this->_impl_.payload_.Set(from._internal_payload(), _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:mtk.SystemPayload.Connect)
}

inline void SystemPayload_Connect::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_) {}

    , decltype(_impl_.id_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.payload_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SystemPayload_Connect::~SystemPayload_Connect() {
  // @@protoc_insertion_point(destructor:mtk.SystemPayload.Connect)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SystemPayload_Connect::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.payload_.Destroy();
}

void SystemPayload_Connect::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SystemPayload_Connect::Clear() {
// @@protoc_insertion_point(message_clear_start:mtk.SystemPayload.Connect)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.payload_.ClearToEmpty();
  _impl_.id_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SystemPayload_Connect::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes payload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SystemPayload_Connect::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mtk.SystemPayload.Connect)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_id(), target);
  }

  // bytes payload = 2;
  if (!this->_internal_payload().empty()) {
    const std::string& _s = this->_internal_payload();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mtk.SystemPayload.Connect)
  return target;
}

::size_t SystemPayload_Connect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mtk.SystemPayload.Connect)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes payload = 2;
  if (!this->_internal_payload().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_payload());
  }

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SystemPayload_Connect::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SystemPayload_Connect::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SystemPayload_Connect::GetClassData() const { return &_class_data_; }


void SystemPayload_Connect::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SystemPayload_Connect*>(&to_msg);
  auto& from = static_cast<const SystemPayload_Connect&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mtk.SystemPayload.Connect)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_payload().empty()) {
    _this->_internal_set_payload(from._internal_payload());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SystemPayload_Connect::CopyFrom(const SystemPayload_Connect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mtk.SystemPayload.Connect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemPayload_Connect::IsInitialized() const {
  return true;
}

void SystemPayload_Connect::InternalSwap(SystemPayload_Connect* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.payload_, lhs_arena,
                                       &other->_impl_.payload_, rhs_arena);

  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SystemPayload_Connect::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mtk_2eproto_getter, &descriptor_table_mtk_2eproto_once,
      file_level_metadata_mtk_2eproto[1]);
}
// ===================================================================

class SystemPayload_Ping::_Internal {
 public:
};

SystemPayload_Ping::SystemPayload_Ping(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mtk.SystemPayload.Ping)
}
SystemPayload_Ping::SystemPayload_Ping(const SystemPayload_Ping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SystemPayload_Ping* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_) {}

    , decltype(_impl_.now_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.payload_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload().empty()) {
    _this->_impl_.payload_.Set(from._internal_payload(), _this->GetArenaForAllocation());
  }
  _this->_impl_.now_ = from._impl_.now_;
  // @@protoc_insertion_point(copy_constructor:mtk.SystemPayload.Ping)
}

inline void SystemPayload_Ping::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_) {}

    , decltype(_impl_.now_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.payload_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SystemPayload_Ping::~SystemPayload_Ping() {
  // @@protoc_insertion_point(destructor:mtk.SystemPayload.Ping)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SystemPayload_Ping::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.payload_.Destroy();
}

void SystemPayload_Ping::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SystemPayload_Ping::Clear() {
// @@protoc_insertion_point(message_clear_start:mtk.SystemPayload.Ping)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.payload_.ClearToEmpty();
  _impl_.now_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SystemPayload_Ping::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 now = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.now_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes payload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SystemPayload_Ping::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mtk.SystemPayload.Ping)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 now = 1;
  if (this->_internal_now() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_now(), target);
  }

  // bytes payload = 2;
  if (!this->_internal_payload().empty()) {
    const std::string& _s = this->_internal_payload();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mtk.SystemPayload.Ping)
  return target;
}

::size_t SystemPayload_Ping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mtk.SystemPayload.Ping)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes payload = 2;
  if (!this->_internal_payload().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_payload());
  }

  // uint64 now = 1;
  if (this->_internal_now() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_now());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SystemPayload_Ping::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SystemPayload_Ping::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SystemPayload_Ping::GetClassData() const { return &_class_data_; }


void SystemPayload_Ping::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SystemPayload_Ping*>(&to_msg);
  auto& from = static_cast<const SystemPayload_Ping&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mtk.SystemPayload.Ping)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_payload().empty()) {
    _this->_internal_set_payload(from._internal_payload());
  }
  if (from._internal_now() != 0) {
    _this->_internal_set_now(from._internal_now());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SystemPayload_Ping::CopyFrom(const SystemPayload_Ping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mtk.SystemPayload.Ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemPayload_Ping::IsInitialized() const {
  return true;
}

void SystemPayload_Ping::InternalSwap(SystemPayload_Ping* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.payload_, lhs_arena,
                                       &other->_impl_.payload_, rhs_arena);

  swap(_impl_.now_, other->_impl_.now_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SystemPayload_Ping::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mtk_2eproto_getter, &descriptor_table_mtk_2eproto_once,
      file_level_metadata_mtk_2eproto[2]);
}
// ===================================================================

class SystemPayload_Login::_Internal {
 public:
};

SystemPayload_Login::SystemPayload_Login(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mtk.SystemPayload.Login)
}
SystemPayload_Login::SystemPayload_Login(const SystemPayload_Login& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SystemPayload_Login* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_) {}

    , decltype(_impl_.login_cid_) {}

    , decltype(_impl_.id_) {}

    , decltype(_impl_.msgid_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.payload_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload().empty()) {
    _this->_impl_.payload_.Set(from._internal_payload(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.login_cid_, &from._impl_.login_cid_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.msgid_) -
    reinterpret_cast<char*>(&_impl_.login_cid_)) + sizeof(_impl_.msgid_));
  // @@protoc_insertion_point(copy_constructor:mtk.SystemPayload.Login)
}

inline void SystemPayload_Login::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_) {}

    , decltype(_impl_.login_cid_) { ::uint64_t{0u} }

    , decltype(_impl_.id_) { ::uint64_t{0u} }

    , decltype(_impl_.msgid_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.payload_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SystemPayload_Login::~SystemPayload_Login() {
  // @@protoc_insertion_point(destructor:mtk.SystemPayload.Login)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SystemPayload_Login::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.payload_.Destroy();
}

void SystemPayload_Login::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SystemPayload_Login::Clear() {
// @@protoc_insertion_point(message_clear_start:mtk.SystemPayload.Login)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.payload_.ClearToEmpty();
  ::memset(&_impl_.login_cid_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.msgid_) -
      reinterpret_cast<char*>(&_impl_.login_cid_)) + sizeof(_impl_.msgid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SystemPayload_Login::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 login_cid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.login_cid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 msgid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.msgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes payload = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SystemPayload_Login::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mtk.SystemPayload.Login)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 login_cid = 1;
  if (this->_internal_login_cid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_login_cid(), target);
  }

  // uint64 id = 2;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_id(), target);
  }

  // uint32 msgid = 3;
  if (this->_internal_msgid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_msgid(), target);
  }

  // bytes payload = 4;
  if (!this->_internal_payload().empty()) {
    const std::string& _s = this->_internal_payload();
    target = stream->WriteBytesMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mtk.SystemPayload.Login)
  return target;
}

::size_t SystemPayload_Login::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mtk.SystemPayload.Login)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes payload = 4;
  if (!this->_internal_payload().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_payload());
  }

  // uint64 login_cid = 1;
  if (this->_internal_login_cid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_login_cid());
  }

  // uint64 id = 2;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_id());
  }

  // uint32 msgid = 3;
  if (this->_internal_msgid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_msgid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SystemPayload_Login::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SystemPayload_Login::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SystemPayload_Login::GetClassData() const { return &_class_data_; }


void SystemPayload_Login::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SystemPayload_Login*>(&to_msg);
  auto& from = static_cast<const SystemPayload_Login&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mtk.SystemPayload.Login)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_payload().empty()) {
    _this->_internal_set_payload(from._internal_payload());
  }
  if (from._internal_login_cid() != 0) {
    _this->_internal_set_login_cid(from._internal_login_cid());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_msgid() != 0) {
    _this->_internal_set_msgid(from._internal_msgid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SystemPayload_Login::CopyFrom(const SystemPayload_Login& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mtk.SystemPayload.Login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemPayload_Login::IsInitialized() const {
  return true;
}

void SystemPayload_Login::InternalSwap(SystemPayload_Login* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.payload_, lhs_arena,
                                       &other->_impl_.payload_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SystemPayload_Login, _impl_.msgid_)
      + sizeof(SystemPayload_Login::_impl_.msgid_)
      - PROTOBUF_FIELD_OFFSET(SystemPayload_Login, _impl_.login_cid_)>(
          reinterpret_cast<char*>(&_impl_.login_cid_),
          reinterpret_cast<char*>(&other->_impl_.login_cid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SystemPayload_Login::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mtk_2eproto_getter, &descriptor_table_mtk_2eproto_once,
      file_level_metadata_mtk_2eproto[3]);
}
// ===================================================================

class SystemPayload_Close::_Internal {
 public:
};

SystemPayload_Close::SystemPayload_Close(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:mtk.SystemPayload.Close)
}
SystemPayload_Close::SystemPayload_Close(const SystemPayload_Close& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  SystemPayload_Close* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mtk.SystemPayload.Close)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SystemPayload_Close::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SystemPayload_Close::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SystemPayload_Close::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mtk_2eproto_getter, &descriptor_table_mtk_2eproto_once,
      file_level_metadata_mtk_2eproto[4]);
}
// ===================================================================

class SystemPayload::_Internal {
 public:
};

SystemPayload::SystemPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:mtk.SystemPayload)
}
SystemPayload::SystemPayload(const SystemPayload& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  SystemPayload* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mtk.SystemPayload)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SystemPayload::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SystemPayload::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SystemPayload::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mtk_2eproto_getter, &descriptor_table_mtk_2eproto_once,
      file_level_metadata_mtk_2eproto[5]);
}
// ===================================================================

class Request::_Internal {
 public:
};

Request::Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mtk.Request)
}
Request::Request(const Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_) {}

    , decltype(_impl_.type_) {}

    , decltype(_impl_.msgid_) {}

    , decltype(_impl_.kind_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.payload_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload().empty()) {
    _this->_impl_.payload_.Set(from._internal_payload(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.kind_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.kind_));
  // @@protoc_insertion_point(copy_constructor:mtk.Request)
}

inline void Request::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_) {}

    , decltype(_impl_.type_) { 0u }

    , decltype(_impl_.msgid_) { 0u }

    , decltype(_impl_.kind_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.payload_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:mtk.Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Request::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.payload_.Destroy();
}

void Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:mtk.Request)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.payload_.ClearToEmpty();
  ::memset(&_impl_.type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.kind_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.kind_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 msgid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.msgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .mtk.Request.Kind kind = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_kind(static_cast<::mtk::Request_Kind>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes payload = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Request::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mtk.Request)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_type(), target);
  }

  // uint32 msgid = 2;
  if (this->_internal_msgid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_msgid(), target);
  }

  // .mtk.Request.Kind kind = 3;
  if (this->_internal_kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_kind(), target);
  }

  // bytes payload = 10;
  if (!this->_internal_payload().empty()) {
    const std::string& _s = this->_internal_payload();
    target = stream->WriteBytesMaybeAliased(10, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mtk.Request)
  return target;
}

::size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mtk.Request)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes payload = 10;
  if (!this->_internal_payload().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_payload());
  }

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_type());
  }

  // uint32 msgid = 2;
  if (this->_internal_msgid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_msgid());
  }

  // .mtk.Request.Kind kind = 3;
  if (this->_internal_kind() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_kind());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Request::GetClassData() const { return &_class_data_; }


void Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Request*>(&to_msg);
  auto& from = static_cast<const Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mtk.Request)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_payload().empty()) {
    _this->_internal_set_payload(from._internal_payload());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_msgid() != 0) {
    _this->_internal_set_msgid(from._internal_msgid());
  }
  if (from._internal_kind() != 0) {
    _this->_internal_set_kind(from._internal_kind());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mtk.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  return true;
}

void Request::InternalSwap(Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.payload_, lhs_arena,
                                       &other->_impl_.payload_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Request, _impl_.kind_)
      + sizeof(Request::_impl_.kind_)
      - PROTOBUF_FIELD_OFFSET(Request, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mtk_2eproto_getter, &descriptor_table_mtk_2eproto_once,
      file_level_metadata_mtk_2eproto[6]);
}
// ===================================================================

class Reply::_Internal {
 public:
  using HasBits = decltype(std::declval<Reply>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Reply, _impl_._has_bits_);
  static const ::mtk::Error& error(const Reply* msg);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mtk::Error&
Reply::_Internal::error(const Reply* msg) {
  return *msg->_impl_.error_;
}
Reply::Reply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mtk.Reply)
}
Reply::Reply(const Reply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Reply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.payload_) {}

    , decltype(_impl_.error_){nullptr}
    , decltype(_impl_.type_) {}

    , decltype(_impl_.msgid_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.payload_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload().empty()) {
    _this->_impl_.payload_.Set(from._internal_payload(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.error_ = new ::mtk::Error(*from._impl_.error_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.msgid_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.msgid_));
  // @@protoc_insertion_point(copy_constructor:mtk.Reply)
}

inline void Reply::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.payload_) {}

    , decltype(_impl_.error_){nullptr}
    , decltype(_impl_.type_) { 0u }

    , decltype(_impl_.msgid_) { 0u }

  };
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.payload_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Reply::~Reply() {
  // @@protoc_insertion_point(destructor:mtk.Reply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Reply::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.payload_.Destroy();
  if (this != internal_default_instance()) delete _impl_.error_;
}

void Reply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Reply::Clear() {
// @@protoc_insertion_point(message_clear_start:mtk.Reply)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.payload_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.error_ != nullptr);
    _impl_.error_->Clear();
  }
  ::memset(&_impl_.type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.msgid_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.msgid_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Reply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 msgid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.msgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .mtk.Error error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes payload = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Reply::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mtk.Reply)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_type(), target);
  }

  // uint32 msgid = 2;
  if (this->_internal_msgid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_msgid(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .mtk.Error error = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  // bytes payload = 10;
  if (!this->_internal_payload().empty()) {
    const std::string& _s = this->_internal_payload();
    target = stream->WriteBytesMaybeAliased(10, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mtk.Reply)
  return target;
}

::size_t Reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mtk.Reply)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes payload = 10;
  if (!this->_internal_payload().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_payload());
  }

  // .mtk.Error error = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.error_);
  }

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_type());
  }

  // uint32 msgid = 2;
  if (this->_internal_msgid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_msgid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Reply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Reply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Reply::GetClassData() const { return &_class_data_; }


void Reply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Reply*>(&to_msg);
  auto& from = static_cast<const Reply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mtk.Reply)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_payload().empty()) {
    _this->_internal_set_payload(from._internal_payload());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_error()->::mtk::Error::MergeFrom(
        from._internal_error());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_msgid() != 0) {
    _this->_internal_set_msgid(from._internal_msgid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Reply::CopyFrom(const Reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mtk.Reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reply::IsInitialized() const {
  return true;
}

void Reply::InternalSwap(Reply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.payload_, lhs_arena,
                                       &other->_impl_.payload_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Reply, _impl_.msgid_)
      + sizeof(Reply::_impl_.msgid_)
      - PROTOBUF_FIELD_OFFSET(Reply, _impl_.error_)>(
          reinterpret_cast<char*>(&_impl_.error_),
          reinterpret_cast<char*>(&other->_impl_.error_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Reply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mtk_2eproto_getter, &descriptor_table_mtk_2eproto_once,
      file_level_metadata_mtk_2eproto[7]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace mtk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mtk::Error*
Arena::CreateMaybeMessage< ::mtk::Error >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mtk::Error >(arena);
}
template<> PROTOBUF_NOINLINE ::mtk::SystemPayload_Connect*
Arena::CreateMaybeMessage< ::mtk::SystemPayload_Connect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mtk::SystemPayload_Connect >(arena);
}
template<> PROTOBUF_NOINLINE ::mtk::SystemPayload_Ping*
Arena::CreateMaybeMessage< ::mtk::SystemPayload_Ping >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mtk::SystemPayload_Ping >(arena);
}
template<> PROTOBUF_NOINLINE ::mtk::SystemPayload_Login*
Arena::CreateMaybeMessage< ::mtk::SystemPayload_Login >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mtk::SystemPayload_Login >(arena);
}
template<> PROTOBUF_NOINLINE ::mtk::SystemPayload_Close*
Arena::CreateMaybeMessage< ::mtk::SystemPayload_Close >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mtk::SystemPayload_Close >(arena);
}
template<> PROTOBUF_NOINLINE ::mtk::SystemPayload*
Arena::CreateMaybeMessage< ::mtk::SystemPayload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mtk::SystemPayload >(arena);
}
template<> PROTOBUF_NOINLINE ::mtk::Request*
Arena::CreateMaybeMessage< ::mtk::Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mtk::Request >(arena);
}
template<> PROTOBUF_NOINLINE ::mtk::Reply*
Arena::CreateMaybeMessage< ::mtk::Reply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mtk::Reply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
