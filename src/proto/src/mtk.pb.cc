// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mtk.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mtk.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mtk {

namespace {

const ::google::protobuf::Descriptor* Error_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Error_reflection_ = NULL;
const ::google::protobuf::Descriptor* SystemPayload_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SystemPayload_reflection_ = NULL;
const ::google::protobuf::Descriptor* SystemPayload_Connect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SystemPayload_Connect_reflection_ = NULL;
const ::google::protobuf::Descriptor* SystemPayload_Ping_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SystemPayload_Ping_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Request_Kind_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Reply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mtk_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_mtk_2eproto() {
  protobuf_AddDesc_mtk_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mtk.proto");
  GOOGLE_CHECK(file != NULL);
  Error_descriptor_ = file->message_type(0);
  static const int Error_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, payload_),
  };
  Error_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Error_descriptor_,
      Error::default_instance_,
      Error_offsets_,
      -1,
      -1,
      -1,
      sizeof(Error),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _is_default_instance_));
  SystemPayload_descriptor_ = file->message_type(1);
  static const int SystemPayload_offsets_[1] = {
  };
  SystemPayload_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SystemPayload_descriptor_,
      SystemPayload::default_instance_,
      SystemPayload_offsets_,
      -1,
      -1,
      -1,
      sizeof(SystemPayload),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemPayload, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemPayload, _is_default_instance_));
  SystemPayload_Connect_descriptor_ = SystemPayload_descriptor_->nested_type(0);
  static const int SystemPayload_Connect_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemPayload_Connect, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemPayload_Connect, payload_),
  };
  SystemPayload_Connect_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SystemPayload_Connect_descriptor_,
      SystemPayload_Connect::default_instance_,
      SystemPayload_Connect_offsets_,
      -1,
      -1,
      -1,
      sizeof(SystemPayload_Connect),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemPayload_Connect, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemPayload_Connect, _is_default_instance_));
  SystemPayload_Ping_descriptor_ = SystemPayload_descriptor_->nested_type(1);
  static const int SystemPayload_Ping_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemPayload_Ping, now_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemPayload_Ping, payload_),
  };
  SystemPayload_Ping_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SystemPayload_Ping_descriptor_,
      SystemPayload_Ping::default_instance_,
      SystemPayload_Ping_offsets_,
      -1,
      -1,
      -1,
      sizeof(SystemPayload_Ping),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemPayload_Ping, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemPayload_Ping, _is_default_instance_));
  Request_descriptor_ = file->message_type(2);
  static const int Request_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, payload_),
  };
  Request_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      -1,
      -1,
      -1,
      sizeof(Request),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _is_default_instance_));
  Request_Kind_descriptor_ = Request_descriptor_->enum_type(0);
  Reply_descriptor_ = file->message_type(3);
  static const int Reply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, payload_),
  };
  Reply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Reply_descriptor_,
      Reply::default_instance_,
      Reply_offsets_,
      -1,
      -1,
      -1,
      sizeof(Reply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mtk_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Error_descriptor_, &Error::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SystemPayload_descriptor_, &SystemPayload::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SystemPayload_Connect_descriptor_, &SystemPayload_Connect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SystemPayload_Ping_descriptor_, &SystemPayload_Ping::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Reply_descriptor_, &Reply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mtk_2eproto() {
  delete Error::default_instance_;
  delete Error_reflection_;
  delete SystemPayload::default_instance_;
  delete SystemPayload_reflection_;
  delete SystemPayload_Connect::default_instance_;
  delete SystemPayload_Connect_reflection_;
  delete SystemPayload_Ping::default_instance_;
  delete SystemPayload_Ping_reflection_;
  delete Request::default_instance_;
  delete Request_reflection_;
  delete Reply::default_instance_;
  delete Reply_reflection_;
}

void protobuf_AddDesc_mtk_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_mtk_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tmtk.proto\022\003mtk\",\n\005Error\022\022\n\nerror_code\030"
    "\001 \001(\005\022\017\n\007payload\030\002 \001(\014\"]\n\rSystemPayload\032"
    "&\n\007Connect\022\n\n\002id\030\001 \001(\004\022\017\n\007payload\030\002 \001(\014\032"
    "$\n\004Ping\022\013\n\003now\030\001 \001(\004\022\017\n\007payload\030\002 \001(\014\"\203\001"
    "\n\007Request\022\014\n\004type\030\001 \001(\r\022\r\n\005msgid\030\002 \001(\r\022\037"
    "\n\004kind\030\003 \001(\0162\021.mtk.Request.Kind\022\017\n\007paylo"
    "ad\030\n \001(\014\")\n\004Kind\022\n\n\006Normal\020\000\022\010\n\004Ping\020\001\022\013"
    "\n\007Connect\020\002\"P\n\005Reply\022\014\n\004type\030\001 \001(\r\022\r\n\005ms"
    "gid\030\002 \001(\r\022\031\n\005error\030\003 \001(\0132\n.mtk.Error\022\017\n\007"
    "payload\030\n \001(\0142Y\n\006Stream\022&\n\004Read\022\014.mtk.Re"
    "quest\032\n.mtk.Reply\"\000(\0010\001\022\'\n\005Write\022\014.mtk.R"
    "equest\032\n.mtk.Reply\"\000(\0010\001b\006proto3", 472);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mtk.proto", &protobuf_RegisterTypes);
  Error::default_instance_ = new Error();
  SystemPayload::default_instance_ = new SystemPayload();
  SystemPayload_Connect::default_instance_ = new SystemPayload_Connect();
  SystemPayload_Ping::default_instance_ = new SystemPayload_Ping();
  Request::default_instance_ = new Request();
  Reply::default_instance_ = new Reply();
  Error::default_instance_->InitAsDefaultInstance();
  SystemPayload::default_instance_->InitAsDefaultInstance();
  SystemPayload_Connect::default_instance_->InitAsDefaultInstance();
  SystemPayload_Ping::default_instance_->InitAsDefaultInstance();
  Request::default_instance_->InitAsDefaultInstance();
  Reply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mtk_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mtk_2eproto {
  StaticDescriptorInitializer_mtk_2eproto() {
    protobuf_AddDesc_mtk_2eproto();
  }
} static_descriptor_initializer_mtk_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Error::kErrorCodeFieldNumber;
const int Error::kPayloadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Error::Error()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mtk.Error)
}

void Error::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Error::Error(const Error& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mtk.Error)
}

void Error::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  error_code_ = 0;
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:mtk.Error)
  SharedDtor();
}

void Error::SharedDtor() {
  payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Error::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Error_descriptor_;
}

const Error& Error::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mtk_2eproto();
  return *default_instance_;
}

Error* Error::default_instance_ = NULL;

Error* Error::New(::google::protobuf::Arena* arena) const {
  Error* n = new Error;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Error::Clear() {
// @@protoc_insertion_point(message_clear_start:mtk.Error)
  error_code_ = 0;
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mtk.Error)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_payload;
        break;
      }

      // optional bytes payload = 2;
      case 2: {
        if (tag == 18) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mtk.Error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mtk.Error)
  return false;
#undef DO_
}

void Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mtk.Error)
  // optional int32 error_code = 1;
  if (this->error_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

  // optional bytes payload = 2;
  if (this->payload().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->payload(), output);
  }

  // @@protoc_insertion_point(serialize_end:mtk.Error)
}

::google::protobuf::uint8* Error::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mtk.Error)
  // optional int32 error_code = 1;
  if (this->error_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }

  // optional bytes payload = 2;
  if (this->payload().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->payload(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mtk.Error)
  return target;
}

int Error::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mtk.Error)
  int total_size = 0;

  // optional int32 error_code = 1;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->error_code());
  }

  // optional bytes payload = 2;
  if (this->payload().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->payload());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Error::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mtk.Error)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Error* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Error>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mtk.Error)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mtk.Error)
    MergeFrom(*source);
  }
}

void Error::MergeFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mtk.Error)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.error_code() != 0) {
    set_error_code(from.error_code());
  }
  if (from.payload().size() > 0) {

    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
}

void Error::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mtk.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error::CopyFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mtk.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {

  return true;
}

void Error::Swap(Error* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Error::InternalSwap(Error* other) {
  std::swap(error_code_, other->error_code_);
  payload_.Swap(&other->payload_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Error::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Error_descriptor_;
  metadata.reflection = Error_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Error

// optional int32 error_code = 1;
void Error::clear_error_code() {
  error_code_ = 0;
}
 ::google::protobuf::int32 Error::error_code() const {
  // @@protoc_insertion_point(field_get:mtk.Error.error_code)
  return error_code_;
}
 void Error::set_error_code(::google::protobuf::int32 value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:mtk.Error.error_code)
}

// optional bytes payload = 2;
void Error::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Error::payload() const {
  // @@protoc_insertion_point(field_get:mtk.Error.payload)
  return payload_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Error::set_payload(const ::std::string& value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mtk.Error.payload)
}
 void Error::set_payload(const char* value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mtk.Error.payload)
}
 void Error::set_payload(const void* value, size_t size) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mtk.Error.payload)
}
 ::std::string* Error::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:mtk.Error.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Error::release_payload() {
  // @@protoc_insertion_point(field_release:mtk.Error.payload)
  
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Error::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:mtk.Error.payload)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemPayload_Connect::kIdFieldNumber;
const int SystemPayload_Connect::kPayloadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemPayload_Connect::SystemPayload_Connect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mtk.SystemPayload.Connect)
}

void SystemPayload_Connect::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SystemPayload_Connect::SystemPayload_Connect(const SystemPayload_Connect& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mtk.SystemPayload.Connect)
}

void SystemPayload_Connect::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SystemPayload_Connect::~SystemPayload_Connect() {
  // @@protoc_insertion_point(destructor:mtk.SystemPayload.Connect)
  SharedDtor();
}

void SystemPayload_Connect::SharedDtor() {
  payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SystemPayload_Connect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SystemPayload_Connect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SystemPayload_Connect_descriptor_;
}

const SystemPayload_Connect& SystemPayload_Connect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mtk_2eproto();
  return *default_instance_;
}

SystemPayload_Connect* SystemPayload_Connect::default_instance_ = NULL;

SystemPayload_Connect* SystemPayload_Connect::New(::google::protobuf::Arena* arena) const {
  SystemPayload_Connect* n = new SystemPayload_Connect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SystemPayload_Connect::Clear() {
// @@protoc_insertion_point(message_clear_start:mtk.SystemPayload.Connect)
  id_ = GOOGLE_ULONGLONG(0);
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SystemPayload_Connect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mtk.SystemPayload.Connect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_payload;
        break;
      }

      // optional bytes payload = 2;
      case 2: {
        if (tag == 18) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mtk.SystemPayload.Connect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mtk.SystemPayload.Connect)
  return false;
#undef DO_
}

void SystemPayload_Connect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mtk.SystemPayload.Connect)
  // optional uint64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional bytes payload = 2;
  if (this->payload().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->payload(), output);
  }

  // @@protoc_insertion_point(serialize_end:mtk.SystemPayload.Connect)
}

::google::protobuf::uint8* SystemPayload_Connect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mtk.SystemPayload.Connect)
  // optional uint64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional bytes payload = 2;
  if (this->payload().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->payload(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mtk.SystemPayload.Connect)
  return target;
}

int SystemPayload_Connect::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mtk.SystemPayload.Connect)
  int total_size = 0;

  // optional uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  // optional bytes payload = 2;
  if (this->payload().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->payload());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemPayload_Connect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mtk.SystemPayload.Connect)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SystemPayload_Connect* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SystemPayload_Connect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mtk.SystemPayload.Connect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mtk.SystemPayload.Connect)
    MergeFrom(*source);
  }
}

void SystemPayload_Connect::MergeFrom(const SystemPayload_Connect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mtk.SystemPayload.Connect)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.payload().size() > 0) {

    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
}

void SystemPayload_Connect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mtk.SystemPayload.Connect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemPayload_Connect::CopyFrom(const SystemPayload_Connect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mtk.SystemPayload.Connect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemPayload_Connect::IsInitialized() const {

  return true;
}

void SystemPayload_Connect::Swap(SystemPayload_Connect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SystemPayload_Connect::InternalSwap(SystemPayload_Connect* other) {
  std::swap(id_, other->id_);
  payload_.Swap(&other->payload_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SystemPayload_Connect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SystemPayload_Connect_descriptor_;
  metadata.reflection = SystemPayload_Connect_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemPayload_Ping::kNowFieldNumber;
const int SystemPayload_Ping::kPayloadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemPayload_Ping::SystemPayload_Ping()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mtk.SystemPayload.Ping)
}

void SystemPayload_Ping::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SystemPayload_Ping::SystemPayload_Ping(const SystemPayload_Ping& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mtk.SystemPayload.Ping)
}

void SystemPayload_Ping::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  now_ = GOOGLE_ULONGLONG(0);
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SystemPayload_Ping::~SystemPayload_Ping() {
  // @@protoc_insertion_point(destructor:mtk.SystemPayload.Ping)
  SharedDtor();
}

void SystemPayload_Ping::SharedDtor() {
  payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SystemPayload_Ping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SystemPayload_Ping::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SystemPayload_Ping_descriptor_;
}

const SystemPayload_Ping& SystemPayload_Ping::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mtk_2eproto();
  return *default_instance_;
}

SystemPayload_Ping* SystemPayload_Ping::default_instance_ = NULL;

SystemPayload_Ping* SystemPayload_Ping::New(::google::protobuf::Arena* arena) const {
  SystemPayload_Ping* n = new SystemPayload_Ping;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SystemPayload_Ping::Clear() {
// @@protoc_insertion_point(message_clear_start:mtk.SystemPayload.Ping)
  now_ = GOOGLE_ULONGLONG(0);
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SystemPayload_Ping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mtk.SystemPayload.Ping)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 now = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &now_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_payload;
        break;
      }

      // optional bytes payload = 2;
      case 2: {
        if (tag == 18) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mtk.SystemPayload.Ping)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mtk.SystemPayload.Ping)
  return false;
#undef DO_
}

void SystemPayload_Ping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mtk.SystemPayload.Ping)
  // optional uint64 now = 1;
  if (this->now() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->now(), output);
  }

  // optional bytes payload = 2;
  if (this->payload().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->payload(), output);
  }

  // @@protoc_insertion_point(serialize_end:mtk.SystemPayload.Ping)
}

::google::protobuf::uint8* SystemPayload_Ping::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mtk.SystemPayload.Ping)
  // optional uint64 now = 1;
  if (this->now() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->now(), target);
  }

  // optional bytes payload = 2;
  if (this->payload().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->payload(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mtk.SystemPayload.Ping)
  return target;
}

int SystemPayload_Ping::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mtk.SystemPayload.Ping)
  int total_size = 0;

  // optional uint64 now = 1;
  if (this->now() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->now());
  }

  // optional bytes payload = 2;
  if (this->payload().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->payload());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemPayload_Ping::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mtk.SystemPayload.Ping)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SystemPayload_Ping* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SystemPayload_Ping>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mtk.SystemPayload.Ping)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mtk.SystemPayload.Ping)
    MergeFrom(*source);
  }
}

void SystemPayload_Ping::MergeFrom(const SystemPayload_Ping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mtk.SystemPayload.Ping)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.now() != 0) {
    set_now(from.now());
  }
  if (from.payload().size() > 0) {

    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
}

void SystemPayload_Ping::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mtk.SystemPayload.Ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemPayload_Ping::CopyFrom(const SystemPayload_Ping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mtk.SystemPayload.Ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemPayload_Ping::IsInitialized() const {

  return true;
}

void SystemPayload_Ping::Swap(SystemPayload_Ping* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SystemPayload_Ping::InternalSwap(SystemPayload_Ping* other) {
  std::swap(now_, other->now_);
  payload_.Swap(&other->payload_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SystemPayload_Ping::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SystemPayload_Ping_descriptor_;
  metadata.reflection = SystemPayload_Ping_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemPayload::SystemPayload()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mtk.SystemPayload)
}

void SystemPayload::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SystemPayload::SystemPayload(const SystemPayload& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mtk.SystemPayload)
}

void SystemPayload::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

SystemPayload::~SystemPayload() {
  // @@protoc_insertion_point(destructor:mtk.SystemPayload)
  SharedDtor();
}

void SystemPayload::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SystemPayload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SystemPayload::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SystemPayload_descriptor_;
}

const SystemPayload& SystemPayload::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mtk_2eproto();
  return *default_instance_;
}

SystemPayload* SystemPayload::default_instance_ = NULL;

SystemPayload* SystemPayload::New(::google::protobuf::Arena* arena) const {
  SystemPayload* n = new SystemPayload;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SystemPayload::Clear() {
// @@protoc_insertion_point(message_clear_start:mtk.SystemPayload)
}

bool SystemPayload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mtk.SystemPayload)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:mtk.SystemPayload)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mtk.SystemPayload)
  return false;
#undef DO_
}

void SystemPayload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mtk.SystemPayload)
  // @@protoc_insertion_point(serialize_end:mtk.SystemPayload)
}

::google::protobuf::uint8* SystemPayload::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mtk.SystemPayload)
  // @@protoc_insertion_point(serialize_to_array_end:mtk.SystemPayload)
  return target;
}

int SystemPayload::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mtk.SystemPayload)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemPayload::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mtk.SystemPayload)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SystemPayload* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SystemPayload>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mtk.SystemPayload)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mtk.SystemPayload)
    MergeFrom(*source);
  }
}

void SystemPayload::MergeFrom(const SystemPayload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mtk.SystemPayload)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void SystemPayload::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mtk.SystemPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemPayload::CopyFrom(const SystemPayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mtk.SystemPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemPayload::IsInitialized() const {

  return true;
}

void SystemPayload::Swap(SystemPayload* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SystemPayload::InternalSwap(SystemPayload* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SystemPayload::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SystemPayload_descriptor_;
  metadata.reflection = SystemPayload_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SystemPayload_Connect

// optional uint64 id = 1;
void SystemPayload_Connect::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 SystemPayload_Connect::id() const {
  // @@protoc_insertion_point(field_get:mtk.SystemPayload.Connect.id)
  return id_;
}
 void SystemPayload_Connect::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:mtk.SystemPayload.Connect.id)
}

// optional bytes payload = 2;
void SystemPayload_Connect::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SystemPayload_Connect::payload() const {
  // @@protoc_insertion_point(field_get:mtk.SystemPayload.Connect.payload)
  return payload_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SystemPayload_Connect::set_payload(const ::std::string& value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mtk.SystemPayload.Connect.payload)
}
 void SystemPayload_Connect::set_payload(const char* value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mtk.SystemPayload.Connect.payload)
}
 void SystemPayload_Connect::set_payload(const void* value, size_t size) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mtk.SystemPayload.Connect.payload)
}
 ::std::string* SystemPayload_Connect::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:mtk.SystemPayload.Connect.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SystemPayload_Connect::release_payload() {
  // @@protoc_insertion_point(field_release:mtk.SystemPayload.Connect.payload)
  
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SystemPayload_Connect::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:mtk.SystemPayload.Connect.payload)
}

// -------------------------------------------------------------------

// SystemPayload_Ping

// optional uint64 now = 1;
void SystemPayload_Ping::clear_now() {
  now_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 SystemPayload_Ping::now() const {
  // @@protoc_insertion_point(field_get:mtk.SystemPayload.Ping.now)
  return now_;
}
 void SystemPayload_Ping::set_now(::google::protobuf::uint64 value) {
  
  now_ = value;
  // @@protoc_insertion_point(field_set:mtk.SystemPayload.Ping.now)
}

// optional bytes payload = 2;
void SystemPayload_Ping::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SystemPayload_Ping::payload() const {
  // @@protoc_insertion_point(field_get:mtk.SystemPayload.Ping.payload)
  return payload_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SystemPayload_Ping::set_payload(const ::std::string& value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mtk.SystemPayload.Ping.payload)
}
 void SystemPayload_Ping::set_payload(const char* value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mtk.SystemPayload.Ping.payload)
}
 void SystemPayload_Ping::set_payload(const void* value, size_t size) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mtk.SystemPayload.Ping.payload)
}
 ::std::string* SystemPayload_Ping::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:mtk.SystemPayload.Ping.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SystemPayload_Ping::release_payload() {
  // @@protoc_insertion_point(field_release:mtk.SystemPayload.Ping.payload)
  
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SystemPayload_Ping::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:mtk.SystemPayload.Ping.payload)
}

// -------------------------------------------------------------------

// SystemPayload

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Request_Kind_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_Kind_descriptor_;
}
bool Request_Kind_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Request_Kind Request::Normal;
const Request_Kind Request::Ping;
const Request_Kind Request::Connect;
const Request_Kind Request::Kind_MIN;
const Request_Kind Request::Kind_MAX;
const int Request::Kind_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request::kTypeFieldNumber;
const int Request::kMsgidFieldNumber;
const int Request::kKindFieldNumber;
const int Request::kPayloadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request::Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mtk.Request)
}

void Request::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Request::Request(const Request& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mtk.Request)
}

void Request::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0u;
  msgid_ = 0u;
  kind_ = 0;
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:mtk.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mtk_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New(::google::protobuf::Arena* arena) const {
  Request* n = new Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:mtk.Request)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Request, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Request*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, msgid_);
  kind_ = 0;
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mtk.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msgid;
        break;
      }

      // optional uint32 msgid = 2;
      case 2: {
        if (tag == 16) {
         parse_msgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_kind;
        break;
      }

      // optional .mtk.Request.Kind kind = 3;
      case 3: {
        if (tag == 24) {
         parse_kind:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_kind(static_cast< ::mtk::Request_Kind >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_payload;
        break;
      }

      // optional bytes payload = 10;
      case 10: {
        if (tag == 82) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mtk.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mtk.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mtk.Request)
  // optional uint32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint32 msgid = 2;
  if (this->msgid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->msgid(), output);
  }

  // optional .mtk.Request.Kind kind = 3;
  if (this->kind() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->kind(), output);
  }

  // optional bytes payload = 10;
  if (this->payload().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->payload(), output);
  }

  // @@protoc_insertion_point(serialize_end:mtk.Request)
}

::google::protobuf::uint8* Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mtk.Request)
  // optional uint32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint32 msgid = 2;
  if (this->msgid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->msgid(), target);
  }

  // optional .mtk.Request.Kind kind = 3;
  if (this->kind() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->kind(), target);
  }

  // optional bytes payload = 10;
  if (this->payload().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->payload(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mtk.Request)
  return target;
}

int Request::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mtk.Request)
  int total_size = 0;

  // optional uint32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  // optional uint32 msgid = 2;
  if (this->msgid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msgid());
  }

  // optional .mtk.Request.Kind kind = 3;
  if (this->kind() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
  }

  // optional bytes payload = 10;
  if (this->payload().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->payload());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mtk.Request)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Request* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mtk.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mtk.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mtk.Request)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.msgid() != 0) {
    set_msgid(from.msgid());
  }
  if (from.kind() != 0) {
    set_kind(from.kind());
  }
  if (from.payload().size() > 0) {

    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mtk.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mtk.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {

  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  std::swap(type_, other->type_);
  std::swap(msgid_, other->msgid_);
  std::swap(kind_, other->kind_);
  payload_.Swap(&other->payload_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Request

// optional uint32 type = 1;
void Request::clear_type() {
  type_ = 0u;
}
 ::google::protobuf::uint32 Request::type() const {
  // @@protoc_insertion_point(field_get:mtk.Request.type)
  return type_;
}
 void Request::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:mtk.Request.type)
}

// optional uint32 msgid = 2;
void Request::clear_msgid() {
  msgid_ = 0u;
}
 ::google::protobuf::uint32 Request::msgid() const {
  // @@protoc_insertion_point(field_get:mtk.Request.msgid)
  return msgid_;
}
 void Request::set_msgid(::google::protobuf::uint32 value) {
  
  msgid_ = value;
  // @@protoc_insertion_point(field_set:mtk.Request.msgid)
}

// optional .mtk.Request.Kind kind = 3;
void Request::clear_kind() {
  kind_ = 0;
}
 ::mtk::Request_Kind Request::kind() const {
  // @@protoc_insertion_point(field_get:mtk.Request.kind)
  return static_cast< ::mtk::Request_Kind >(kind_);
}
 void Request::set_kind(::mtk::Request_Kind value) {
  
  kind_ = value;
  // @@protoc_insertion_point(field_set:mtk.Request.kind)
}

// optional bytes payload = 10;
void Request::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Request::payload() const {
  // @@protoc_insertion_point(field_get:mtk.Request.payload)
  return payload_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request::set_payload(const ::std::string& value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mtk.Request.payload)
}
 void Request::set_payload(const char* value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mtk.Request.payload)
}
 void Request::set_payload(const void* value, size_t size) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mtk.Request.payload)
}
 ::std::string* Request::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:mtk.Request.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Request::release_payload() {
  // @@protoc_insertion_point(field_release:mtk.Request.payload)
  
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:mtk.Request.payload)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Reply::kTypeFieldNumber;
const int Reply::kMsgidFieldNumber;
const int Reply::kErrorFieldNumber;
const int Reply::kPayloadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Reply::Reply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mtk.Reply)
}

void Reply::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  error_ = const_cast< ::mtk::Error*>(&::mtk::Error::default_instance());
}

Reply::Reply(const Reply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mtk.Reply)
}

void Reply::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0u;
  msgid_ = 0u;
  error_ = NULL;
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Reply::~Reply() {
  // @@protoc_insertion_point(destructor:mtk.Reply)
  SharedDtor();
}

void Reply::SharedDtor() {
  payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete error_;
  }
}

void Reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reply_descriptor_;
}

const Reply& Reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mtk_2eproto();
  return *default_instance_;
}

Reply* Reply::default_instance_ = NULL;

Reply* Reply::New(::google::protobuf::Arena* arena) const {
  Reply* n = new Reply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Reply::Clear() {
// @@protoc_insertion_point(message_clear_start:mtk.Reply)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Reply, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Reply*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, msgid_);
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mtk.Reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msgid;
        break;
      }

      // optional uint32 msgid = 2;
      case 2: {
        if (tag == 16) {
         parse_msgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_error;
        break;
      }

      // optional .mtk.Error error = 3;
      case 3: {
        if (tag == 26) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_payload;
        break;
      }

      // optional bytes payload = 10;
      case 10: {
        if (tag == 82) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mtk.Reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mtk.Reply)
  return false;
#undef DO_
}

void Reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mtk.Reply)
  // optional uint32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint32 msgid = 2;
  if (this->msgid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->msgid(), output);
  }

  // optional .mtk.Error error = 3;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->error_, output);
  }

  // optional bytes payload = 10;
  if (this->payload().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->payload(), output);
  }

  // @@protoc_insertion_point(serialize_end:mtk.Reply)
}

::google::protobuf::uint8* Reply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mtk.Reply)
  // optional uint32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint32 msgid = 2;
  if (this->msgid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->msgid(), target);
  }

  // optional .mtk.Error error = 3;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->error_, false, target);
  }

  // optional bytes payload = 10;
  if (this->payload().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->payload(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mtk.Reply)
  return target;
}

int Reply::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mtk.Reply)
  int total_size = 0;

  // optional uint32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  // optional uint32 msgid = 2;
  if (this->msgid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msgid());
  }

  // optional .mtk.Error error = 3;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);
  }

  // optional bytes payload = 10;
  if (this->payload().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->payload());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mtk.Reply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Reply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Reply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mtk.Reply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mtk.Reply)
    MergeFrom(*source);
  }
}

void Reply::MergeFrom(const Reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mtk.Reply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.msgid() != 0) {
    set_msgid(from.msgid());
  }
  if (from.has_error()) {
    mutable_error()->::mtk::Error::MergeFrom(from.error());
  }
  if (from.payload().size() > 0) {

    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
}

void Reply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mtk.Reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reply::CopyFrom(const Reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mtk.Reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reply::IsInitialized() const {

  return true;
}

void Reply::Swap(Reply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Reply::InternalSwap(Reply* other) {
  std::swap(type_, other->type_);
  std::swap(msgid_, other->msgid_);
  std::swap(error_, other->error_);
  payload_.Swap(&other->payload_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Reply_descriptor_;
  metadata.reflection = Reply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Reply

// optional uint32 type = 1;
void Reply::clear_type() {
  type_ = 0u;
}
 ::google::protobuf::uint32 Reply::type() const {
  // @@protoc_insertion_point(field_get:mtk.Reply.type)
  return type_;
}
 void Reply::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:mtk.Reply.type)
}

// optional uint32 msgid = 2;
void Reply::clear_msgid() {
  msgid_ = 0u;
}
 ::google::protobuf::uint32 Reply::msgid() const {
  // @@protoc_insertion_point(field_get:mtk.Reply.msgid)
  return msgid_;
}
 void Reply::set_msgid(::google::protobuf::uint32 value) {
  
  msgid_ = value;
  // @@protoc_insertion_point(field_set:mtk.Reply.msgid)
}

// optional .mtk.Error error = 3;
bool Reply::has_error() const {
  return !_is_default_instance_ && error_ != NULL;
}
void Reply::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}
const ::mtk::Error& Reply::error() const {
  // @@protoc_insertion_point(field_get:mtk.Reply.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
::mtk::Error* Reply::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::mtk::Error;
  }
  // @@protoc_insertion_point(field_mutable:mtk.Reply.error)
  return error_;
}
::mtk::Error* Reply::release_error() {
  // @@protoc_insertion_point(field_release:mtk.Reply.error)
  
  ::mtk::Error* temp = error_;
  error_ = NULL;
  return temp;
}
void Reply::set_allocated_error(::mtk::Error* error) {
  delete error_;
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtk.Reply.error)
}

// optional bytes payload = 10;
void Reply::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Reply::payload() const {
  // @@protoc_insertion_point(field_get:mtk.Reply.payload)
  return payload_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Reply::set_payload(const ::std::string& value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mtk.Reply.payload)
}
 void Reply::set_payload(const char* value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mtk.Reply.payload)
}
 void Reply::set_payload(const void* value, size_t size) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mtk.Reply.payload)
}
 ::std::string* Reply::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:mtk.Reply.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Reply::release_payload() {
  // @@protoc_insertion_point(field_release:mtk.Reply.payload)
  
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Reply::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:mtk.Reply.payload)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace mtk

// @@protoc_insertion_point(global_scope)
