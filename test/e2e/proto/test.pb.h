// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef PROTOBUF_test_2eproto__INCLUDED
#define PROTOBUF_test_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace mtktest {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_test_2eproto();
void protobuf_InitDefaults_test_2eproto();
void protobuf_AssignDesc_test_2eproto();
void protobuf_ShutdownFile_test_2eproto();

class PingReply;
class PingRequest;

enum MessageTypes {
  Invalid = 0,
  Ping = 1,
  MessageTypes_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MessageTypes_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MessageTypes_IsValid(int value);
const MessageTypes MessageTypes_MIN = Invalid;
const MessageTypes MessageTypes_MAX = Ping;
const int MessageTypes_ARRAYSIZE = MessageTypes_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageTypes_descriptor();
inline const ::std::string& MessageTypes_Name(MessageTypes value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageTypes_descriptor(), value);
}
inline bool MessageTypes_Parse(
    const ::std::string& name, MessageTypes* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageTypes>(
    MessageTypes_descriptor(), name, value);
}
// ===================================================================

class PingRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtktest.PingRequest) */ {
 public:
  PingRequest();
  virtual ~PingRequest();

  PingRequest(const PingRequest& from);

  inline PingRequest& operator=(const PingRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PingRequest& default_instance();

  static const PingRequest* internal_default_instance();

  void Swap(PingRequest* other);

  // implements Message ----------------------------------------------

  inline PingRequest* New() const { return New(NULL); }

  PingRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PingRequest& from);
  void MergeFrom(const PingRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PingRequest* other);
  void UnsafeMergeFrom(const PingRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 sent = 1;
  void clear_sent();
  static const int kSentFieldNumber = 1;
  ::google::protobuf::uint64 sent() const;
  void set_sent(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:mtktest.PingRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 sent_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_test_2eproto_impl();
  friend void  protobuf_AddDesc_test_2eproto_impl();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<PingRequest> PingRequest_default_instance_;

// -------------------------------------------------------------------

class PingReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtktest.PingReply) */ {
 public:
  PingReply();
  virtual ~PingReply();

  PingReply(const PingReply& from);

  inline PingReply& operator=(const PingReply& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PingReply& default_instance();

  static const PingReply* internal_default_instance();

  void Swap(PingReply* other);

  // implements Message ----------------------------------------------

  inline PingReply* New() const { return New(NULL); }

  PingReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PingReply& from);
  void MergeFrom(const PingReply& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PingReply* other);
  void UnsafeMergeFrom(const PingReply& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 sent = 1;
  void clear_sent();
  static const int kSentFieldNumber = 1;
  ::google::protobuf::uint64 sent() const;
  void set_sent(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:mtktest.PingReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 sent_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_test_2eproto_impl();
  friend void  protobuf_AddDesc_test_2eproto_impl();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<PingReply> PingReply_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// PingRequest

// optional uint64 sent = 1;
inline void PingRequest::clear_sent() {
  sent_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PingRequest::sent() const {
  // @@protoc_insertion_point(field_get:mtktest.PingRequest.sent)
  return sent_;
}
inline void PingRequest::set_sent(::google::protobuf::uint64 value) {
  
  sent_ = value;
  // @@protoc_insertion_point(field_set:mtktest.PingRequest.sent)
}

inline const PingRequest* PingRequest::internal_default_instance() {
  return &PingRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// PingReply

// optional uint64 sent = 1;
inline void PingReply::clear_sent() {
  sent_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PingReply::sent() const {
  // @@protoc_insertion_point(field_get:mtktest.PingReply.sent)
  return sent_;
}
inline void PingReply::set_sent(::google::protobuf::uint64 value) {
  
  sent_ = value;
  // @@protoc_insertion_point(field_set:mtktest.PingReply.sent)
}

inline const PingReply* PingReply::internal_default_instance() {
  return &PingReply_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mtktest

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::mtktest::MessageTypes> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mtktest::MessageTypes>() {
  return ::mtktest::MessageTypes_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_test_2eproto__INCLUDED
